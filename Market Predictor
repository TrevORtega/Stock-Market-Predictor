import math


# ask user for a date or a price
dateOrPrice = input("Enter whether you wish to enter a date or a price\n")

isPrice = 0
isDate = 0
year = 0
month = 0
monthsSince = 0


# determines months since 1915 and creates the final date if a date is given
def fdate(y,m):
    # months since 1915
    mS = ((year - 1915) * 12) + m
    # final date format m/1/yyyy 
    dF = str(m) + "/1/" + str(y)
    return mS, dF

# checks if price is correct format xx.xx
def is_price(iprice):
    periodChecker = iprice[len(iprice) - 3]
    if periodChecker == '.':
        return float(iprice)
    else:
        print("not a price and/or wrong format")
        return 0

if dateOrPrice == "price":
    initial_price = input("Enter a price e.g(1709.06)\n")
    price = is_price(initial_price)
    if price != 0:
        isPrice = 1
    
elif dateOrPrice == "date":
    year = int(input("Enter a year\n"))
    # dates not included in .txt files
    if year > 2018 or (year > 1968 and year < 1984):
        isDate = 2
    # dow jones 1985.txt
    elif year > 1984 and isDate != 2:
        isDate = 3
    # dow jones 1914.txt    
    elif year > 1914 and isDate == 0:
        isDate = 1
    else:
        print("Year needs to be after 1914")
        
    month = int(input("Enter the month\n"))
    if month < 0 and month > 13:
            isDate = 0
            print("Needs to be a correct month")
    else:
        monthsSince, date = fdate(year, month)
elif isPrice == 0:
    print("Incorrect Format (maybe add decimal point)")
    
# predict the price if a correct date is given
if isDate != 0:
    # Date formula
    PredictPrice = round(12.315 * (1.54 * monthsSince + 20.73 * math.sin((2 * 3.14159 / 51) * monthsSince)) + 1315.88, 2)
    print("Predicted Price: $" + str(PredictPrice))
    

# predict the date if a correct price is given
if isPrice == 1:
    # price formula is months = (price - 1315.88) / 19.051
    monthsSince = int(round((price - 1315.88) / 19.051))
    print(str(monthsSince) + " months since 1915")
    # find the month for the date
    if monthsSince > 12:
        year = int(monthsSince / 12)
        month = monthsSince - (year * 12)
    # the month can never be zero in a date
    if monthsSince == 0 or month == 0:
        month = 1
    else:
        month = monthsSince
    print("Predicted date:", month, "/1/", year + 1915)
    
# value will be in dow jones 1985.txt
if isDate == 3 or isPrice == 1:
    # open up file and give back the correct date or price
    data1985 = open("Dow Jones 1985.txt")
    # for every line in data, check if the file date matches the given date
    for lines in data1985:
        values85 = lines.split()
        if isDate == 3:
            if values85[0] == date:
                print("Actual price: " + str(values85[1]))
        if isPrice == 1:
            if str(price) == values85[1]:
               print("Actual date: " + str(values85[0]))
    data1985.close()

# value will be in dow jones 1914.txt
if isDate == 1 or isPrice == 1:
    # open up file and give back the correct date or price
    data1914 = open("dow jones 1914 with inflation.txt")
    # for every line in data, check if the file date matches the given date
    for rows in data1914:
        values14 = rows.split()
        if isDate == 1:
            if values14[0] == date:
                print("Actual price: " + str(values14[2]))
        if isPrice == 1:
            if str(price) == values14[2]:
               print("Actual date: " + str(values14[0]))
    data1914.close()

# predict whether or not to invest for a period of time
# avg market pattern intervals is 36 month increase followed by 15 month decrease (36+15=51)
if (isPrice == 1 or isDate != 0):
    interval = int(monthsSince / 51)
    monthsSinceInterval = monthsSince - (51 * interval)
    is_positive = 34.04 * math.cos(.1232 * monthsSince) + 20.53 # this is the derivative of the other price function; if positive the market is profitable, if negeative it is not
    
    if (is_positive > 0): # the month is profitable
        print("Advice: Invest as soon as possible during this month")
    else: # the month is not profitable
        print("Advice: Don't invest or sell during this month")
    
